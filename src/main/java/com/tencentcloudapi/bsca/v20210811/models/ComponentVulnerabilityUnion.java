/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.tencentcloudapi.bsca.v20210811.models;

import com.tencentcloudapi.common.AbstractModel;
import com.tencentcloudapi.common.SSEResponseModel;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import java.util.HashMap;

public class ComponentVulnerabilityUnion extends AbstractModel {

    /**
    * 漏洞概览信息
    */
    @SerializedName("Summary")
    @Expose
    private VulnerabilitySummary Summary;

    /**
    * 与组件相关的漏洞概览信息
    */
    @SerializedName("SummaryInComponent")
    @Expose
    private ComponentVulnerabilitySummary SummaryInComponent;

    /**
     * Get 漏洞概览信息 
     * @return Summary 漏洞概览信息
     */
    public VulnerabilitySummary getSummary() {
        return this.Summary;
    }

    /**
     * Set 漏洞概览信息
     * @param Summary 漏洞概览信息
     */
    public void setSummary(VulnerabilitySummary Summary) {
        this.Summary = Summary;
    }

    /**
     * Get 与组件相关的漏洞概览信息 
     * @return SummaryInComponent 与组件相关的漏洞概览信息
     */
    public ComponentVulnerabilitySummary getSummaryInComponent() {
        return this.SummaryInComponent;
    }

    /**
     * Set 与组件相关的漏洞概览信息
     * @param SummaryInComponent 与组件相关的漏洞概览信息
     */
    public void setSummaryInComponent(ComponentVulnerabilitySummary SummaryInComponent) {
        this.SummaryInComponent = SummaryInComponent;
    }

    public ComponentVulnerabilityUnion() {
    }

    /**
     * NOTE: Any ambiguous key set via .set("AnyKey", "value") will be a shallow copy,
     *       and any explicit key, i.e Foo, set via .setFoo("value") will be a deep copy.
     */
    public ComponentVulnerabilityUnion(ComponentVulnerabilityUnion source) {
        if (source.Summary != null) {
            this.Summary = new VulnerabilitySummary(source.Summary);
        }
        if (source.SummaryInComponent != null) {
            this.SummaryInComponent = new ComponentVulnerabilitySummary(source.SummaryInComponent);
        }
    }


    /**
     * Internal implementation, normal users should not use it.
     */
    public void toMap(HashMap<String, String> map, String prefix) {
        this.setParamObj(map, prefix + "Summary.", this.Summary);
        this.setParamObj(map, prefix + "SummaryInComponent.", this.SummaryInComponent);

    }
}

